(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{394:function(v,_,e){v.exports=e.p+"assets/img/three.3783649b.png"},404:function(v,_,e){"use strict";e.r(_);var c=e(44),o=Object(c.a)({},(function(){var v=this,_=v.$createElement,c=v._self._c||_;return c("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[c("h1",{attrs:{id:"tcp的三次握手和四次挥手"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#tcp的三次握手和四次挥手"}},[v._v("#")]),v._v(" tcp的三次握手和四次挥手")]),v._v(" "),c("h2",{attrs:{id:"三次握手"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[v._v("#")]),v._v(" 三次握手")]),v._v(" "),c("p",[v._v("三次握手"),c("code",[v._v("（Three-way Handshake）")]),v._v("其实就是指建立一个"),c("code",[v._v("TCP")]),v._v("连接时，需要客户端和服务器总共发送"),c("code",[v._v("3")]),v._v("个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立"),c("code",[v._v("TCP")]),v._v("连接，并同步连接双方的序列号和确认号，交换"),c("code",[v._v("TCP")]),v._v("窗口大小信息。")]),v._v(" "),c("ul",[c("li",[v._v("客户端：喂，听得到嘛，听到请回答")]),v._v(" "),c("li",[v._v("服务端：听到了，你听的到嘛")]),v._v(" "),c("li",[v._v("客户端：听的到，开始干吧")])]),v._v(" "),c("p",[v._v("刚开始客户端处于 "),c("code",[v._v("Closed")]),v._v(" 的状态，服务端处于 "),c("code",[v._v("Listen")]),v._v(" 状态。\n进行三次握手：")]),v._v(" "),c("ul",[c("li",[c("p",[v._v("第一次握手：客户端给服务端发一个 "),c("code",[v._v("SYN")]),v._v(" 报文，并指明客户端的初始化序列号 "),c("code",[v._v("ISN")]),v._v("。此时客户端处于 "),c("code",[v._v("SYN_SENT")]),v._v(" 状态。首部的同步位"),c("code",[v._v("SYN=1")]),v._v("，初始序号"),c("code",[v._v("seq=x")]),v._v("，"),c("code",[v._v("SYN=1")]),v._v("的报文段不能携带数据，但要消耗掉一个序号。")])]),v._v(" "),c("li",[c("p",[v._v("第二次握手：服务器收到客户端的 "),c("code",[v._v("SYN")]),v._v(" 报文之后，会以自己的 "),c("code",[v._v("SYN")]),v._v(" 报文作为应答，并且也是指定了自己的初始化序列号 "),c("code",[v._v("ISN(s)")]),v._v("。同时会把客户端的 "),c("code",[v._v("ISN + 1")]),v._v(" 作为"),c("code",[v._v("ACK")]),v._v(" 的值，表示自己已经收到了客户端的 "),c("code",[v._v("SYN")]),v._v("，此时服务器处于 "),c("code",[v._v("SYN_RCVD")]),v._v(" 的状态。服务器端将"),c("code",[v._v("TCP")]),v._v("报文标志位"),c("code",[v._v("SYN")]),v._v("和"),c("code",[v._v("ACK")]),v._v("都置为"),c("code",[v._v("1")]),v._v(",确认号"),c("code",[v._v("ack=x+1")]),v._v("，初始序号"),c("code",[v._v("seq=y")]),v._v("。")])]),v._v(" "),c("li",[c("p",[v._v("第三次握手：客户端收到 "),c("code",[v._v("SYN")]),v._v(" 报文之后，会发送一个 "),c("code",[v._v("ACK")]),v._v(" 报文，当然，也是一样把服务器的 "),c("code",[v._v("ISN + 1")]),v._v(" 作为 "),c("code",[v._v("ACK")]),v._v(" 的值，表示已经收到了服务端的 "),c("code",[v._v("SYN")]),v._v(" 报文，此时客户端处于 "),c("code",[v._v("ESTABLISHED")]),v._v(" 状态。服务器收到 "),c("code",[v._v("ACK")]),v._v(" 报文之后，也处于 "),c("code",[v._v("ESTABLISHED")]),v._v(" 状态，此时，双方已建立起了连接。确认报文段"),c("code",[v._v("ACK=1")]),v._v("，确认号"),c("code",[v._v("ack=y+1")]),v._v("，序号"),c("code",[v._v("seq=x+1")]),v._v("（初始为"),c("code",[v._v("seq=x")]),v._v("，第二个报文段所以要"),c("code",[v._v("+1")]),v._v("），"),c("code",[v._v("ACK")]),v._v("报文段可以携带数据，不携带数据则不消耗序号。")])])]),v._v(" "),c("p",[v._v("发送第一个"),c("code",[v._v("SYN")]),v._v("的一端将执行主动打开"),c("code",[v._v("（active open）")]),v._v("，接收这个"),c("code",[v._v("SYN")]),v._v("并发回下一个SYN的另一端执行被动打开"),c("code",[v._v("（passive open）")]),v._v("。\n"),c("img",{attrs:{src:e(394),alt:""}})])])}),[],!1,null,null,null);_.default=o.exports}}]);